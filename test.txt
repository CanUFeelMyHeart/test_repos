
## Инструкция по работе с Git #  
___

* *Для того, чтобы создать пустой репозиторий, нужно*
> __git init__


* *Чтобы начать схранение файла с именем file_name, нужно:*
>__git add file_name__ или __git add__ .


* *Создание коммита: (комментарий для программиста)*
> __git commit -m “message”__ 

* *Журнал всех коммитов*  
> __git log__

* *Чтобы вернуться к какому-то коммиту нужно:*  
> __git checkout <хеш_код>__
> __git checkout master (вернуться к последней версии)__

* *Чтобы увидеть разницу между текущим файлом и закоммиченным файлом, нужно:*  
> __git diff__
* *Добавление цитат*
> Для обозначения цитат в языке Markdown используется знак «больше» («>»). 
>> Второй уровень цитирования
>>>Третий уровень цитирования

* *Вставка изображения в документ*
>_С помощью непосредственного указания URL-адреса изображения_  
![Байкал](IMG_1892.JPG)

* *Добавление ссылок в документ*  
> _Гиперссылка, с немедленным указанием адреса (внутритекстовая)_  
[GeekBrains](https://gb.ru/)

чтобы вывести все ветки на экран мы используем команду:  
> git branch

чтобы создать новую ветку, мы используем:

* git branch branch_name
  
Новые команды:

+ git commit -a -m "message" - сохранение **текущего** файла и коммит
+ git checkout - b branch_name - создание и переход к ветке с именем branch_name

чтобы перейти к другой ветке мы используем :  
1. git checkout <название ветки>
чтобы удалить ветку с **замерженными изменениями**, мы используем:
1. git branch -d branch_name

чтобы удалить ветку с **не замерженными изменениями**, мы используем:
1. git branch -D branch_name

## С точки зрения логики, ветка – это последовательность коммитов.

![branch](https://thumb.tildacdn.com/tild3232-3639-4135-a639-316239376265/-/resize/768x/-/format/webp/1_3.png)


# Немного про указатели

Указатель – это ссылка на определенный коммит или ветку. А ссылка – это некоторая метка, которую использует Git или сам пользователь, чтобы указать на коммит или ветку.

1. *HEAD* – так называемый курсор Git. Главное назначение HEAD - определять, в каком состоянии находится рабочая копия
2. *ORIG_HEAD* – указатель, который появляется, когда мы вручную передвигаем HEAD на какой-нибудь НЕ последний коммит. ORIG_HEAD указывает на тот же коммит, на который указывал HEAD до передвижения назад.


# Просмотр списка веток

## Команда git branch (git branch <ключи>)

* "-r" с этим ключом будут выделены только удаленные ветки
* "-a" с этим ключом будут выделены и локальные и удаленные ветки
# Команда git checkout -b

В основе данного способа лежит тот факт, что команда git checkout умеет создавать ветки и сразу переключаться на них. 

Формат
git checkout <ключ> <имя ветки>

# Работа с репозиториями GitHub

1. ***git clone*** <url-адрес репозитория> – клонирование внешнего репозитория на  локальный ПК
2. ***git pull*** – получение изменений и слияние с локальной версией
3. ***git push*** – отправляет локальную версию репозитория на внешний
